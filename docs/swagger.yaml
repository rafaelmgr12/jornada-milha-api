basePath: /v2
definitions:
  destinations.DestinationsCreateDTO:
    properties:
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
  destinations.DestinationsUpdateDTO:
    properties:
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
  entity.Destinations:
    properties:
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
  entity.Testimonial:
    properties:
      id:
        type: string
      name:
        type: string
      testimonial:
        type: string
    type: object
  testimonials.TestimonialCreateDTO:
    properties:
      name:
        type: string
      testimonial:
        type: string
    type: object
  testimonials.TestimonialUpdateDTO:
    properties:
      id:
        type: string
      name:
        type: string
      testimonial:
        type: string
    type: object
info:
  contact:
    email: ribeirorafaelmatheus@gmail.com
    name: Rafael Ribeiro
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Jorna Milha API
  version: "1.0"
paths:
  /api/v1/depoimentos:
    get:
      consumes:
      - application/json
      description: Get a list of all Testimonials
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Testimonial'
            type: array
      summary: Retrieve all Testimonials
      tags:
      - testimonials
    post:
      consumes:
      - application/json
      description: Create a Testimonial
      parameters:
      - description: TestimonialCreateDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/testimonials.TestimonialCreateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Testimonial'
      summary: Create a Testimonial
      tags:
      - testimonials
    put:
      consumes:
      - application/json
      description: Update a specific Testimonial
      parameters:
      - description: TestimonialUpdateDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/testimonials.TestimonialUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Testimonial'
      summary: Update a Testimonial
      tags:
      - testimonials
  /api/v1/depoimentos-home:
    get:
      consumes:
      - application/json
      description: Get a list of three random Testimonials
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Testimonial'
            type: array
      summary: Retrieve three random Testimonials
      tags:
      - testimonials
  /api/v1/depoimentos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific Testimonial
      parameters:
      - description: Testimonial ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a Testimonial
      tags:
      - testimonials
  /api/v1/destinos:
    get:
      consumes:
      - application/json
      description: Get list of destinations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Destinations'
            type: array
      summary: Get list of destinations
      tags:
      - destinations
    post:
      consumes:
      - application/json
      description: Create a new destination
      parameters:
      - description: DestinationsCreateDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/destinations.DestinationsCreateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Destinations'
      summary: Create a new destination
      tags:
      - destinations
    put:
      consumes:
      - application/json
      description: Update a destination
      parameters:
      - description: DestinationUpdateDTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/destinations.DestinationsUpdateDTO'
      produces:
      - application/json
      responses: {}
      summary: Update a destination
      tags:
      - destinations
  /api/v1/destinos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a destination
      parameters:
      - description: Destination ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete a destination
      tags:
      - destinations
  /api/v1/query/destinos:
    get:
      consumes:
      - application/json
      description: Search destinations by name
      parameters:
      - description: Destination Name
        in: query
        name: nome
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Destinations'
            type: array
        "404":
          description: 'mensagem": "Nenhum destino foi encontrado'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search destinations by name
      tags:
      - destinations
swagger: "2.0"
