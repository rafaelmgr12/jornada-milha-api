// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package db

import (
	"context"
)

const createTestimonial = `-- name: CreateTestimonial :exec
INSERT INTO testimonials (id, name, testimonial) VALUES (?, ?, ?)
`

type CreateTestimonialParams struct {
	ID          string
	Name        string
	Testimonial string
}

func (q *Queries) CreateTestimonial(ctx context.Context, arg CreateTestimonialParams) error {
	_, err := q.db.ExecContext(ctx, createTestimonial, arg.ID, arg.Name, arg.Testimonial)
	return err
}

const deleteTestimonial = `-- name: DeleteTestimonial :exec
DELETE FROM testimonials WHERE id = ?
`

func (q *Queries) DeleteTestimonial(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTestimonial, id)
	return err
}

const getTestimonial = `-- name: GetTestimonial :many
SELECT id, name, testimonial FROM testimonials ORDER BY name
`

func (q *Queries) GetTestimonial(ctx context.Context) ([]Testimonial, error) {
	rows, err := q.db.QueryContext(ctx, getTestimonial)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Testimonial
	for rows.Next() {
		var i Testimonial
		if err := rows.Scan(&i.ID, &i.Name, &i.Testimonial); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTestimonial = `-- name: UpdateTestimonial :exec
UPDATE testimonials SET name = ?, testimonial = ? WHERE id = ?
`

type UpdateTestimonialParams struct {
	Name        string
	Testimonial string
	ID          string
}

func (q *Queries) UpdateTestimonial(ctx context.Context, arg UpdateTestimonialParams) error {
	_, err := q.db.ExecContext(ctx, updateTestimonial, arg.Name, arg.Testimonial, arg.ID)
	return err
}
